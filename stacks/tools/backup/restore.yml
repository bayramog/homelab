services:
  backup-restore:
    image: restic/restic:latest
    container_name: backup-restore
    restart: "no"  # Run once and stop
    volumes:
      - ${APP_CONFIG_PATH}/backup:/backup
      - ${APP_CONFIG_PATH}/rclone:/rclone-config
      - ${APP_CONFIG_PATH}/restore:/restore:rw
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - RESTIC_REPOSITORY=/backup/repository
      - RESTORE_TARGET=${RESTORE_TARGET:-/restore}
      - RESTORE_SNAPSHOT=${RESTORE_SNAPSHOT:-latest}
      - RESTORE_PATH=${RESTORE_PATH:-}
      - DOWNLOAD_FROM_ONEDRIVE=${DOWNLOAD_FROM_ONEDRIVE:-true}
    entrypoint: ["/bin/sh"]
    command:
      - "-c"
      - |
        echo "=== Homelab Backup Restore System ==="
        echo "Starting restore process at $(date)"
        
        # Create directories
        mkdir -p /backup/repository /restore
        
        # Install required packages
        echo "Installing packages..."
        apk add --no-cache rclone jq
        
        # Download from OneDrive if enabled
        if [ "$DOWNLOAD_FROM_ONEDRIVE" = "true" ]; then
          echo "Downloading backups from OneDrive..."
          
          if [ -f "/rclone-config/rclone.conf" ]; then
            echo "Syncing from OneDrive to local repository..."
            rclone sync onedrive:homelab-backups /backup/repository \
              --config=/rclone-config/rclone.conf \
              --progress
            
            if [ $? -eq 0 ]; then
              echo "OneDrive download completed successfully"
            else
              echo "ERROR: Failed to download from OneDrive"
              exit 1
            fi
          else
            echo "ERROR: rclone configuration not found at /rclone-config/rclone.conf"
            echo "Please ensure your rclone.conf file is available"
            exit 1
          fi
        else
          echo "Skipping OneDrive download (using local repository)"
        fi
        
        # Set repository
        export RESTIC_REPOSITORY=/backup/repository
        
        # Check repository
        echo "Checking repository..."
        if ! restic snapshots --insecure-no-password >/dev/null 2>&1; then
          echo "ERROR: Cannot access restic repository"
          echo "Make sure the repository exists and is accessible"
          exit 1
        fi
        
        # List available snapshots
        echo ""
        echo "=== Available Snapshots ==="
        restic snapshots --insecure-no-password
        
        # Determine which snapshot to restore
        if [ "$RESTORE_SNAPSHOT" = "latest" ]; then
          SNAPSHOT_ID=$(restic snapshots --json --insecure-no-password | jq -r '.[-1].short_id // empty')
          if [ -z "$SNAPSHOT_ID" ]; then
            echo "ERROR: No snapshots found"
            exit 1
          fi
          echo ""
          echo "Using latest snapshot: $SNAPSHOT_ID"
        else
          SNAPSHOT_ID="$RESTORE_SNAPSHOT"
          echo ""
          echo "Using specified snapshot: $SNAPSHOT_ID"
        fi
        
        # Show what will be restored
        echo ""
        echo "=== Snapshot Contents Preview ==="
        if [ -n "$RESTORE_PATH" ]; then
          echo "Restoring specific path: $RESTORE_PATH"
          restic ls "$SNAPSHOT_ID:$RESTORE_PATH" --insecure-no-password | head -20
        else
          echo "Restoring entire snapshot"
          restic ls "$SNAPSHOT_ID" --insecure-no-password | head -20
        fi
        echo "... (showing first 20 items)"
        
        # Perform restore
        echo ""
        echo "=== Starting Restore ==="
        echo "Target directory: $RESTORE_TARGET"
        
        if [ -n "$RESTORE_PATH" ]; then
          echo "Restoring specific path: $RESTORE_PATH"
          restic restore "$SNAPSHOT_ID:$RESTORE_PATH" \
            --target "$RESTORE_TARGET" \
            --insecure-no-password
        else
          echo "Restoring entire snapshot"
          restic restore "$SNAPSHOT_ID" \
            --target "$RESTORE_TARGET" \
            --insecure-no-password
        fi
        
        if [ $? -eq 0 ]; then
          echo ""
          echo "=== Restore Completed Successfully ==="
          echo "Files restored to: $RESTORE_TARGET"
          echo "Restore completed at: $(date)"
          
          # Show restored content summary
          echo ""
          echo "=== Restored Content Summary ==="
          find "$RESTORE_TARGET" -type f | head -20
          echo "... (showing first 20 files)"
          echo ""
          echo "Total files restored: $(find "$RESTORE_TARGET" -type f | wc -l)"
          echo "Total size: $(du -sh "$RESTORE_TARGET" | cut -f1)"
          
        else
          echo "ERROR: Restore failed"
          exit 1
        fi
        
        echo ""
        echo "=== Next Steps ==="
        echo "1. Review restored files in: $RESTORE_TARGET"
        echo "2. Copy needed files to your homelab configuration"
        echo "3. Remove this container when done: docker rm backup-restore"
        echo ""
        echo "Restore container will now exit. Files remain in the restore directory."
