services:
  backup:
    image: restic/restic:latest
    container_name: backup
    restart: ${RESTART_POLICY}
    volumes:
      - ${APP_CONFIG_PATH}:/source:ro
      - ${APP_CONFIG_PATH}/backup:/backup
      - ${APP_CONFIG_PATH}/rclone:/rclone-config
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - BACKUP_CRON=${BACKUP_CRON:-0 2 * * *}
      - ONEDRIVE_SYNC_ENABLED=${ONEDRIVE_SYNC_ENABLED}
      - RESTIC_REPOSITORY=/backup/repository
    entrypoint: ["/bin/sh"]
    command:
      - "-c"
      - |
        echo "Starting backup container..."
        mkdir -p /backup/repository /backup/logs
        echo "Installing packages..."
        apk add --no-cache busybox-suid tzdata curl ca-certificates rclone
        echo "Initializing restic repository..."
        export RESTIC_REPOSITORY=/backup/repository
        restic snapshots --insecure-no-password || restic init --insecure-no-password
        echo "Setup completed."
        
        # Check if cron is enabled
        if [ -n "$BACKUP_CRON" ]; then
          echo "Setting up cron job: $BACKUP_CRON"
          
          # Create backup script
          cat > /usr/local/bin/backup-script.sh << 'EOF'
        #!/bin/sh
        cd /backup
        echo "Starting backup at $(date)"
        restic backup /source --exclude=/source/backup --tag homelab-config --insecure-no-password
        restic forget --keep-daily 7 --keep-weekly 4 --keep-monthly 3 --prune --insecure-no-password
        echo "Backup completed at $(date)"
        
        # Sync to OneDrive if enabled
        if [ "$ONEDRIVE_SYNC_ENABLED" = "true" ]; then
          echo "Starting OneDrive sync at $(date)"
          
          # Check if rclone is configured
          if [ -f "/rclone-config/rclone.conf" ]; then
            echo "Syncing backup repository to OneDrive..."
            rclone sync /backup/repository onedrive:homelab-backups \
              --config=/rclone-config/rclone.conf \
              --log-file=/backup/logs/rclone-$(date +%Y%m%d).log \
              --log-level INFO
            
            if [ $? -eq 0 ]; then
              echo "OneDrive sync completed successfully at $(date)"
            else
              echo "ERROR: OneDrive sync failed at $(date)"
            fi
          else
            echo "ERROR: rclone configuration not found at /rclone-config/rclone.conf"
            echo "Please configure rclone with OneDrive first using:"
            echo "docker exec -it backup rclone config --config=/rclone-config/rclone.conf"
          fi
        else
          echo "OneDrive sync is disabled"
        fi
        EOF
          chmod +x /usr/local/bin/backup-script.sh
          
          # Setup crontab
          echo "$BACKUP_CRON /usr/local/bin/backup-script.sh >> /backup/logs/backup-$(date +%Y%m%d).log 2>&1" > /tmp/backup-crontab
          crontab /tmp/backup-crontab
          echo "Cron job installed:"
          crontab -l
          echo "Starting cron daemon..."
          exec crond -f -l 2
        else
          echo "No cron schedule set, running backup once..."
          restic backup /source --exclude=/source/backup --tag homelab-config --insecure-no-password
          restic forget --keep-daily 7 --keep-weekly 4 --keep-monthly 3 --prune --insecure-no-password
          echo "Backup completed."
          
          # Sync to OneDrive if enabled
          if [ "$ONEDRIVE_SYNC_ENABLED" = "true" ]; then
            echo "Starting OneDrive sync at $(date)"
            
            if [ -f "/rclone-config/rclone.conf" ]; then
              echo "Syncing backup repository to OneDrive..."
              rclone sync /backup/repository onedrive:homelab-backups \
                --config=/rclone-config/rclone.conf \
                --log-file=/backup/logs/rclone-$(date +%Y%m%d).log \
                --log-level INFO
              
              if [ $? -eq 0 ]; then
                echo "OneDrive sync completed successfully at $(date)"
              else
                echo "ERROR: OneDrive sync failed at $(date)"
              fi
            else
              echo "ERROR: rclone configuration not found"
              echo "Please configure rclone first"
            fi
          fi
          
          echo "Keeping container alive..."
          tail -f /dev/null
        fi